package com.google.sps;

import com.google.cloud.datastore.Datastore;
import com.google.cloud.datastore.DatastoreException;
import com.google.cloud.datastore.DatastoreOptions;
import com.google.cloud.datastore.Entity;
import com.google.cloud.datastore.FullEntity;
import com.google.cloud.datastore.KeyFactory;
import com.google.sps.Puzzle.Difficulty;

/** Puzzle DAO implementation*/
public class PuzzleDao implements Dao<Puzzle> {

    private Datastore datastore;
    private KeyFactory keyFactory;

    public PuzzleDao() {
      datastore = DatastoreOptions.getDefaultInstance().getService();
      keyFactory = datastore.newKeyFactory().setKind("Puzzle");
    }

    @Override
    public Puzzle create(Puzzle puzzle) {
      //saves puzzle object on datastore
      FullEntity taskEntity =
        Entity.newBuilder(keyFactory.newKey())
          .set("imageUrl", puzzle.getImageUrl())
          .set("difficulty", puzzle.getDifficulty().toString())
          .set("name", puzzle.getName())
          .set("username", puzzle.getUsername())
          .build();
      Entity entity = datastore.put(taskEntity);

      //saves the id generated by datastore on the puzzle object
      puzzle.setPuzzleId(entity.getKey().getId());

      return puzzle;
    }

    @Override
    public void update(Puzzle puzzle) {
      //updates the entity with the data contained in "puzzle", 
      // except the id which is used to search for the entity.
      Long puzzleId = puzzle.getPuzzleId();
      Entity task = 
        Entity.newBuilder(datastore.get(keyFactory.newKey(puzzleId)))
          .set("imageUrl", puzzle.getImageUrl())
          .set("difficulty", puzzle.getDifficulty().toString())
          .set("name", puzzle.getName())
          .set("username", puzzle.getUsername())
          .build();
      datastore.update(task);
    }

    @Override
    public Puzzle read(Long puzzleId) {
      //reads the entity whose id match "puzzleID"
      Entity entity = datastore.get(keyFactory.newKey(puzzleId));

      //id was not found
      if(entity == null) {
        return null;
      }

      //saves the retrieved data into a "Puzzle" object
      Difficulty difficulty = Puzzle.Difficulty.valueOf(entity.getString("difficulty"));

      String name;

      try {
          name = entity.getString("name");
      } catch (DatastoreException e) {
          name = "";
      }

      String username;

      try {
          username = entity.getString("name");
      } catch (DatastoreException e) {
          username = "";
      }      

      Puzzle puzzle = new Puzzle()
        .setPuzzleId(entity.getKey().getId())
        .setImageUrl(entity.getString("imageUrl"))
        .setDifficulty(difficulty)
        .setName(name)
        .setUsername(username);

      //returns the object
      return puzzle;
    }

    @Override
    public void delete(Long puzzleId) {
      //deletes the entity whose id match "puzzleID"
      datastore.delete(keyFactory.newKey(puzzleId));
    }
}
